{"version":3,"file":"component---src-templates-votelog-template-js-cd7b6023a95b241bc45d.js","mappings":"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","sources":["webpack://they-work-for-us/./node_modules/extend/index.js","webpack://they-work-for-us/./src/components/externalLink.js","webpack://they-work-for-us/./src/components/quantityLegend.js","webpack://they-work-for-us/./src/components/voterList.js","webpack://they-work-for-us/./node_modules/inline-style-parser/index.js","webpack://they-work-for-us/./node_modules/is-buffer/index.js","webpack://they-work-for-us/./node_modules/lodash/_baseFilter.js","webpack://they-work-for-us/./node_modules/lodash/_baseFindIndex.js","webpack://they-work-for-us/./node_modules/lodash/_createFind.js","webpack://they-work-for-us/./node_modules/lodash/filter.js","webpack://they-work-for-us/./node_modules/lodash/find.js","webpack://they-work-for-us/./node_modules/lodash/findIndex.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/react-is/index.js","webpack://they-work-for-us/./node_modules/style-to-object/index.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/unist-util-stringify-position/lib/index.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/vfile-message/lib/index.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/vfile/lib/minpath.browser.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/vfile/lib/minproc.browser.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/vfile/lib/minurl.shared.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/vfile/lib/minurl.browser.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/vfile/lib/index.js","webpack://they-work-for-us/./node_modules/unified/node_modules/bail/index.js","webpack://they-work-for-us/./node_modules/is-plain-obj/index.js","webpack://they-work-for-us/./node_modules/unified/node_modules/trough/index.js","webpack://they-work-for-us/./node_modules/unified/node_modules/unist-util-stringify-position/lib/index.js","webpack://they-work-for-us/./node_modules/unified/node_modules/vfile-message/lib/index.js","webpack://they-work-for-us/./node_modules/unified/node_modules/vfile/lib/minpath.browser.js","webpack://they-work-for-us/./node_modules/unified/node_modules/vfile/lib/minproc.browser.js","webpack://they-work-for-us/./node_modules/unified/node_modules/vfile/lib/minurl.shared.js","webpack://they-work-for-us/./node_modules/unified/node_modules/vfile/lib/minurl.browser.js","webpack://they-work-for-us/./node_modules/unified/node_modules/vfile/lib/index.js","webpack://they-work-for-us/./node_modules/unified/lib/index.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/mdast-util-to-string/lib/index.js","webpack://they-work-for-us/./node_modules/micromark-util-chunked/index.js","webpack://they-work-for-us/./node_modules/micromark-util-combine-extensions/index.js","webpack://they-work-for-us/./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://they-work-for-us/./node_modules/micromark-util-character/index.js","webpack://they-work-for-us/./node_modules/micromark-factory-space/index.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/micromark/lib/initialize/content.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/micromark/lib/initialize/document.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://they-work-for-us/./node_modules/micromark-util-subtokenize/index.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/content.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/micromark/lib/initialize/flow.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/micromark/lib/initialize/text.js","webpack://they-work-for-us/./node_modules/micromark-util-resolve-all/index.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/micromark/lib/create-tokenizer.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/list.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://they-work-for-us/./node_modules/micromark-factory-destination/index.js","webpack://they-work-for-us/./node_modules/micromark-factory-label/index.js","webpack://they-work-for-us/./node_modules/micromark-factory-title/index.js","webpack://they-work-for-us/./node_modules/micromark-factory-whitespace/index.js","webpack://they-work-for-us/./node_modules/micromark-util-normalize-identifier/index.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://they-work-for-us/./node_modules/micromark-util-html-tag-name/index.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://they-work-for-us/./node_modules/decode-named-character-reference/index.dom.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://they-work-for-us/./node_modules/micromark-util-classify-character/index.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://they-work-for-us/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/micromark/lib/constructs.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/micromark/lib/parse.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/micromark/lib/preprocess.js","webpack://they-work-for-us/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://they-work-for-us/./node_modules/micromark-util-decode-string/index.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/mdast-util-from-markdown/lib/index.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/micromark/lib/postprocess.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/remark-parse/index.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/remark-parse/lib/index.js","webpack://they-work-for-us/./node_modules/micromark-util-sanitize-uri/index.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/unist-util-is/lib/index.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/unist-util-visit-parents/lib/index.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/unist-util-visit/lib/index.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/unist-util-position/lib/index.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-definitions/lib/index.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/revert.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://they-work-for-us/./node_modules/trim-lines/index.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/state.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/unist-util-generated/lib/index.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/index.js","webpack://they-work-for-us/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/footer.js","webpack://they-work-for-us/./node_modules/remark-rehype/lib/index.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/util/schema.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/util/merge.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/normalize.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/util/info.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/util/types.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/util/defined-info.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/util/create.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/xlink.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/xml.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/xmlns.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/aria.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/html.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/svg.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/index.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/unist-util-is/lib/index.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/unist-util-visit-parents/lib/index.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/unist-util-visit/lib/index.js","webpack://they-work-for-us/./node_modules/react-markdown/lib/rehype-filter.js","webpack://they-work-for-us/./node_modules/hast-util-whitespace/index.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/find.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/property-information/lib/hast-to-react.js","webpack://they-work-for-us/./node_modules/style-to-object/index.mjs","webpack://they-work-for-us/./node_modules/react-markdown/lib/uri-transformer.js","webpack://they-work-for-us/./node_modules/react-markdown/lib/ast-to-react.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/comma-separated-tokens/index.js","webpack://they-work-for-us/./node_modules/react-markdown/node_modules/space-separated-tokens/index.js","webpack://they-work-for-us/./node_modules/react-markdown/lib/react-markdown.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","import React from \"react\"\n\nconst ExternalLink = ({ children, ...props }) => {\n  return (\n    <a {...props} target=\"_blank\" rel=\"noreferrer nofollow noopener\">\n      {children}\n    </a>\n  )\n}\n\nexport default ExternalLink\n","import React from \"react\"\n\nconst QuantityLegend = ({\n  text,\n  boxSize,\n  imgSrc,\n  background,\n  quantity,\n  isPercent,\n  invertedBoldText,\n  wrapStyle,\n  boxStyle,\n  descTextStyle,\n}) => {\n  const quantityDisplayText = isPercent ? `${quantity}%` : `${quantity}`\n\n  return (\n    <div\n      css={{\n        marginRight: \"1rem\",\n        display: \"flex\",\n        alignItems: \"baseline\",\n        fontSize: \"unset\",\n        whiteSpace: \"nowrap\",\n        ...wrapStyle,\n      }}\n    >\n      {imgSrc ? (\n        <img\n          src={imgSrc}\n          width={boxSize}\n          height={boxSize}\n          style={{\n            marginRight: \"4px\",\n          }}\n          alt={text}\n        />\n      ) : (\n        <div\n          css={{\n            display: \"inline-box\",\n            boxSizing: \"border-box\",\n            border: `1px solid ${background ?? \"var(--cl-black)\"}`,\n            backgroundColor: `${background ?? \"var(--cl-white)\"}`,\n            marginRight: \"4px\",\n            width: boxSize,\n            height: boxSize,\n            ...boxStyle,\n          }}\n        />\n      )}{\" \"}\n      {invertedBoldText ? (\n        <span>\n          {text && <b style={{ ...descTextStyle }}>{text}</b>}\n          {quantityDisplayText}\n        </span>\n      ) : (\n        <span>\n          {text ? `${text} ` : \"\"} <b>{quantityDisplayText}</b>\n        </span>\n      )}\n    </div>\n  )\n}\n\nexport default QuantityLegend\n","import React, { Component } from \"react\"\nimport { Link } from \"gatsby\"\nimport { css } from \"@emotion/react\"\n\nimport { media } from \"../styles\"\n\nclass ListCard extends Component {\n  state = {\n    voter: this.props.voter,\n    hidden: true,\n    check: this.props.check,\n  }\n  render() {\n    return (\n      <div\n        css={{\n          width: \"100%\",\n          minHeight: this.props.check ? \"unset\" : \"500\",\n          borderRadius: 10,\n          overflow: \"hidden\",\n\n          [media(767)]: {\n            width: \"calc(50% - 2rem)\",\n            \":nth-child(odd)\": {\n              marginRight: \"2rem\",\n            },\n          },\n        }}\n      >\n        <h2\n          style={{\n            fontSize: !this.props.check ? \"2.5rem\" : \"3.2rem\",\n            marginTop: !this.props.check ? \"0\" : \"2.6rem\",\n            padding: !this.props.check ? \"1rem 3rem\" : \"1rem 0 2rem 0\",\n          }}\n        >{`${this.props.choice} (${this.state.voter.length})`}</h2>\n        {this.state.voter.length > 0 ? (\n          <ul\n            css={css`\n              position: relative;\n            `}\n            style={{\n              minHeight: !this.props.check ? \"518px\" : \"285px\",\n              marginBottom: !this.props.check ? \"10rem\" : \"1rem\",\n              marginLeft: !this.props.check ? \"1.44rem\" : \"0\",\n            }}\n          >\n            {this.state.voter\n              .sort((a, b) => a.name.localeCompare(b.name, \"th\"))\n              .map((member, idx) => (\n                <li\n                  key={member.fields.slug}\n                  css={css`\n                    display: ${this.state.hidden && idx > 7 ? \"none\" : \"block\"};\n                  `}\n                  style={{\n                    fontSize: !this.props.check ? \"2rem\" : \"1.8rem\",\n                    margin: !this.props.check ? \"2rem 2rem\" : \"0.5rem 2rem\",\n                  }}\n                >\n                  <Link\n                    to={member.fields.slug}\n                    css={css`\n                      color: var(--cl-black);\n                    `}\n                    style={{\n                      fontWeight: !this.props.check ? \"bold\" : \"normal\",\n                    }}\n                  >\n                    <span>{idx + 1}.&nbsp;</span>\n                    {member.title} {member.name} {member.lastname}\n                  </Link>\n                  {!this.props.check && (\n                    <p>{member.is_senator ? \"สมาชิกวุฒิสภา\" : member.party}</p>\n                  )}\n                </li>\n              ))}\n            {this.state.hidden && this.props.voter.length > 8 ? (\n              <button\n                css={css`\n                  display: flex;\n                  padding: 0;\n                  border: none;\n                  background: none;\n                  width: 100%;\n                  padding-top: 20rem;\n                  background: transparent\n                    linear-gradient(\n                      to bottom,\n                      rgba(0, 0, 0, 0),\n                      rgba(0, 0, 0, 0.5)\n                    );\n                  border-radius: 10px;\n                  position: absolute;\n                  bottom: -2rem;\n                  pointer-events: none;\n                  &:focus {\n                    outline: none;\n                  }\n                `}\n                type=\"button\"\n                onClick={() => this.setState({ hidden: !this.state.hidden })}\n              >\n                <span\n                  css={css`\n                    font-family: var(--ff-title);\n                    font-size: 2.4rem;\n                    line-height: 3rem;\n                    cursor: pointer;\n                    border: 0.2rem solid black;\n                    border-radius: 5px;\n                    padding: 1rem 6rem;\n                    display: block;\n                    margin: 2rem auto;\n                    background-color: white;\n                    pointer-events: auto;\n                  `}\n                >\n                  ดูทั้งหมด\n                </span>\n              </button>\n            ) : (\n              \"\"\n            )}\n          </ul>\n        ) : (\n          <div\n            css={{\n              fontSize: \"2rem\",\n              margin: \"6rem 0\",\n              textAlign: \"center\",\n            }}\n          >\n            ไม่มีคะแนนเลือกมติประเภทนี้\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default function VoterList({ data, page }) {\n  return (\n    <div\n      css={css`\n        display: flex;\n        flex-wrap: wrap;\n      `}\n    >\n      <ListCard voter={data[0]} check={page} choice=\"เห็นด้วย\" />\n      <ListCard voter={data[1]} check={page} choice=\"ไม่เห็นด้วย\" />\n      <ListCard voter={data[2]} check={page} choice=\"งดออกเสียง\" />\n      <ListCard\n        voter={data[3]}\n        check={page}\n        choice={data.length === 5 ? \"ไม่ลงมติ\" : \"ไม่ลงคะแนน\"}\n      />\n      {data.length === 5 && (\n        <ListCard voter={data[4]} check={page} choice=\"ขาด\" />\n      )}\n    </div>\n  )\n}\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n","/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n","var baseIteratee = require('./_baseIteratee'),\n    isArrayLike = require('./isArrayLike'),\n    keys = require('./keys');\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nmodule.exports = createFind;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n","var createFind = require('./_createFind'),\n    findIndex = require('./findIndex');\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nmodule.exports = find;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIteratee = require('./_baseIteratee'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nmodule.exports = findIndex;\n","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n */\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const includeImageAlt = (options || {}).includeImageAlt\n  return one(\n    value,\n    typeof includeImageAlt === 'boolean' ? includeImageAlt : true\n  )\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt) {\n  return (\n    (node(value) &&\n      (('value' in value && value.value) ||\n        (includeImageAlt && 'alt' in value && value.alt) ||\n        ('children' in value && all(value.children, includeImageAlt)))) ||\n    (Array.isArray(value) && all(value, includeImageAlt)) ||\n    ''\n  )\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        // @ts-expect-error: micromark types need to accept `null`.\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    // @ts-expect-error Patched.\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = [\n    name,\n    position.start.line,\n    position.start.column,\n    index\n  ].join('-')\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","children","props","rel","text","boxSize","imgSrc","background","quantity","isPercent","invertedBoldText","wrapStyle","boxStyle","descTextStyle","quantityDisplayText","css","marginRight","display","alignItems","fontSize","whiteSpace","width","height","style","alt","boxSizing","border","backgroundColor","ListCard","state","voter","hidden","check","render","minHeight","this","borderRadius","overflow","media","marginTop","padding","choice","marginBottom","marginLeft","sort","a","b","localeCompare","map","member","idx","fields","slug","margin","Link","to","fontWeight","title","lastname","is_senator","party","type","onClick","setState","Component","VoterList","data","page","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","NEWLINE","FORWARD_SLASH","ASTERISK","EMPTY_STRING","TYPE_COMMENT","TYPE_DECLARATION","trim","str","replace","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","declaration","prop","val","ret","property","decl","decls","declarations","isBuffer","baseEach","collection","predicate","result","index","array","fromIndex","fromRight","baseIteratee","isArrayLike","keys","findIndexFunc","iterable","iteratee","undefined","arrayFilter","baseFilter","find","createFind","baseFindIndex","toInteger","nativeMax","Math","max","u","Symbol","for","d","e","f","g","h","k","l","n","p","q","t","v","r","$$typeof","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","isValidElementType","getModuleId","typeOf","parse","StyleToObject","iterator","output","hasIterator","len","stringifyPosition","point","VFileMessage","place","origin","parts","super","indexOf","message","stack","fatal","ruleId","file","actual","expected","url","note","path","basename","ext","assertPath","seenNonSlash","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","buffer","messages","history","stored","includes","assertNonEmpty","assertPart","stem","encoding","info","fail","part","bail","getPrototypeOf","toStringTag","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","fn","middleware","called","wrapped","parameters","fnExpectsCallback","done","apply","Promise","then","wrap","use","middelware","unified","base","transformers","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","assign","add","plugin","plugins","entry","doc","vfile","assertParser","newable","String","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","asyncName","Boolean","looksLikeAVFile","one","includeImageAlt","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","all","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiDigit","asciiHexDigit","asciiAlphanumeric","asciiPunctuation","asciiAtext","asciiControl","markdownLineEndingOrSpace","markdownLineEnding","markdownSpace","unicodeWhitespace","unicodePunctuation","regex","test","fromCharCode","factorySpace","effects","ok","limit","size","enter","prefix","consume","exit","tokenize","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","document","disable","null","blankLine","partial","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","destinationEnclosedBefore","destinationRaw","destinationEnclosed","destinationEnclosedEscape","destinationRawEscape","factoryLabel","markerType","label","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","titleEscape","factoryWhitespace","normalizeIdentifier","toLowerCase","toUpperCase","definition","identifier","labelAfter","titleConstruct","defined","codeIndented","afterStartPrefix","afterPrefix","indentedContent","headingAtx","fenceOpenInside","headingBreak","setextUnderline","paragraph","closingSequence","closingSequenceEnd","heading","htmlBlockNames","htmlRawNames","htmlFlow","startTag","declarationStart","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","nextBlankConstruct","htmlContinueStart","htmlLineEnd","continuationRawEndTag","codeFenced","closingFenceConstruct","closingSequenceStart","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","close","group","insideSpan","destinationAfter","between","afterLabel","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","commentStart","commentStartDash","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","labelStartLink","hardBreakEscape","codeText","gap","tailExitIndex","headEnterIndex","extensions","combineExtensions","concat","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","head","hex","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","endPosition","lastIndex","ceil","preprocess","combined","normalizeUri","skip","encodeURIComponent","convert","castFactory","typeFactory","tests","checks","any","anyFactory","propsFactory","CONTINUE","EXIT","SKIP","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","parent","pointStart","pointEnd","clean","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","tab","space","trimLines","last","trimLine","codePointAt","handlers","blockquote","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","results","loose","listLoose","disabled","child","root","table","rows","firstRow","shift","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","Schema","normal","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","DefinedInfo","mask","mark","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","aLink","archive","axis","bgColor","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSizeAdjust","fontStretch","fontStyle","fontVariant","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","thing","valid","dash","cap","kebab","camelcase","hastToReact","protocols","uriTransformer","uri","first","colon","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transformLinkUri","parentSchema","schema","addProperty","listDepth","component","components","basic","linkTarget","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","rest","dashes","padRight","padLeft","styleReplacer","parseStyle","changelog","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehypeOptions","rehypePlugins","hastNode","propTypes"],"sourceRoot":""}