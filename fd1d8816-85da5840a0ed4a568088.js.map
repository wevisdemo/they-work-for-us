{"version":3,"file":"fd1d8816-85da5840a0ed4a568088.js","mappings":"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","sources":["webpack://they-work-for-us/./src/pages/senate.js"],"sourcesContent":["import React, { useState } from \"react\"\nimport { graphql } from \"gatsby\"\nimport _ from \"lodash\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport {\n  loadCategoryStats,\n  joinPeopleVotelog,\n  peopleSlug,\n  formatOrdinalNumber,\n} from \"../utils\"\nimport StackedBarChart from \"../components/stackedBarChart\"\nimport { OfficialWebsite, InOfficeDate } from \"../components/profile\"\nimport PeopleCardMini from \"../components/peopleCardMini\"\nimport PeopleCard from \"../components/peopleCard\"\nimport VoteLogCard from \"../components/voteLogCard\"\nimport { media } from \"../styles\"\n\nimport \"../styles/profile-book.css\"\n\nconst VOTE_LIMIT = 6\n\nexport const query = graphql`\n  {\n    senate: partyYaml(party_type: { eq: \"สว\" }, is_active: { eq: true }) {\n      name\n      party_ordinal\n      description\n      established_date\n      dissolved_date\n      speaker\n      first_deputy_speaker\n      second_deputy_speaker\n      website\n      facebook\n      twitter\n      is_active\n    }\n    allPeopleYaml(\n      filter: { is_senator: { eq: true }, is_active: { eq: true } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          title\n          name\n          lastname\n          senator_method\n        }\n      }\n    }\n    gender: allPeopleYaml(\n      filter: { is_senator: { eq: true }, is_active: { eq: true } }\n    ) {\n      group(field: { gender: SELECT }) {\n        value: totalCount\n        name: fieldValue\n      }\n    }\n    education: allPeopleYaml(\n      filter: { is_senator: { eq: true }, is_active: { eq: true } }\n    ) {\n      group(field: { education: SELECT }) {\n        value: totalCount\n        name: fieldValue\n      }\n    }\n    occupation_group: allPeopleYaml(\n      filter: { is_senator: { eq: true }, is_active: { eq: true } }\n    ) {\n      group(field: { occupation_group: SELECT }) {\n        value: totalCount\n        name: fieldValue\n      }\n    }\n    age: allPeopleYaml(\n      filter: { is_senator: { eq: true }, is_active: { eq: true } }\n    ) {\n      edges {\n        node {\n          birthdate\n        }\n      }\n    }\n    asset: allPeopleYaml(\n      filter: { is_senator: { eq: true }, is_active: { eq: true } }\n    ) {\n      edges {\n        node {\n          asset\n        }\n      }\n    }\n    allVotelogYaml(\n      filter: { is_active: { eq: true } }\n      sort: { vote_date: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          title\n          description_th\n          passed\n          vote_date\n        }\n      }\n    }\n    allPeopleVoteYaml {\n      edges {\n        node {\n          id\n          votelog {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n`\n\nconst cssH1 = {\n  fontSize: \"4rem\",\n}\n\nconst cssSection = {\n  paddingTop: \"3rem\",\n  paddingBottom: \"8rem\",\n  h2: {\n    fontSize: \"4.8rem\",\n    textAlign: \"center\",\n  },\n}\n\nconst cssEngTitle = {\n  fontSize: \"2.4rem\",\n  textAlign: \"left\",\n  margin: \"1.5rem 0 1.2rem 0\",\n}\n\nconst cssPageP = {}\n\nconst cssBarChart = {\n  margin: \"1rem 0\",\n}\n\nconst SenatePage = props => {\n  const { senate, ...data } = props.data\n\n  const [memberFilter, setMemberFilter] = useState({})\n  const [members] = useState(data.allPeopleYaml.edges.map(e => e.node))\n  const selectMemberFilter = filter => () => setMemberFilter(filter)\n\n  const countMembers = filter => {\n    // filter member by senator_method\n    let selectedMembers = members.filter(\n      member =>\n        !filter.senator_method ||\n        member.senator_method === filter.senator_method\n    )\n    return selectedMembers.length\n  }\n\n  const getSortedMembers = () => {\n    // filter member by senator_method\n    let selectedMembers = members.filter(\n      member =>\n        !memberFilter.senator_method ||\n        member.senator_method === memberFilter.senator_method\n    )\n    // sort by name and lastname\n    selectedMembers.sort((a, b) =>\n      a.name === b.name\n        ? a.lastname.localeCompare(b.lastname, \"th\")\n        : a.name.localeCompare(b.name, \"th\")\n    )\n    return selectedMembers\n  }\n\n  const tabList = [\n    {\n      id: \"ทั้งหมด\",\n      label: \"ทั้งหมด\",\n      count: countMembers({}),\n      filter: {},\n      getClass: memberFilter => (!memberFilter.senator_method ? \"active\" : \"\"),\n    },\n    {\n      id: \"โดยตำแหน่ง\",\n      label: \"โดยตำแหน่ง\",\n      count: countMembers({ senator_method: \"โดยตำแหน่ง\" }),\n      filter: { senator_method: \"โดยตำแหน่ง\" },\n      getClass: memberFilter =>\n        memberFilter.senator_method === \"โดยตำแหน่ง\" ? \"active\" : \"\",\n    },\n    {\n      id: \"เลือกกันเอง\",\n      label: \"สรรหา\",\n      count: countMembers({ senator_method: \"เลือกกันเอง\" }),\n      filter: { senator_method: \"เลือกกันเอง\" },\n      getClass: memberFilter =>\n        memberFilter.senator_method === \"เลือกกันเอง\" ? \"active\" : \"\",\n    },\n    {\n      id: \"เลือกโดย คสช.\",\n      label: \"เลือกโดย คสช.\",\n      count: countMembers({ senator_method: \"เลือกโดย คสช.\" }),\n      filter: { senator_method: \"เลือกโดย คสช.\" },\n      getClass: memberFilter =>\n        memberFilter.senator_method === \"เลือกโดย คสช.\" ? \"active\" : \"\",\n    },\n  ]\n\n  const { gender, age, education, occupation_group, asset } = loadCategoryStats(\n    data\n  )\n\n  const keyMembers = _.compact(\n    [\n      {\n        name: \"speaker\",\n        label: \"ประธานสภา\",\n      },\n      {\n        name: \"first_deputy_speaker\",\n        label: \"รองประธานสภา คนที่ 1\",\n      },\n      {\n        name: \"second_deputy_speaker\",\n        label: \"รองประธานสภา คนที่ 2\",\n      },\n    ].map((keyPos, id) => {\n      if (!senate[keyPos.name]) return null\n      const nameParts = senate[keyPos.name].split(\" \").slice(1)\n      const slug = peopleSlug(nameParts.join(\" \"))\n      const name = nameParts[0]\n      const lastname = nameParts.slice(1).join(\" \")\n      const position = keyPos.label\n      return { id, name, lastname, position, fields: { slug } }\n    })\n  )\n\n  const showingMembers = getSortedMembers()\n\n  const votelogs = joinPeopleVotelog(\n    data.allPeopleYaml,\n    data.allPeopleVoteYaml,\n    data.allVotelogYaml,\n    VOTE_LIMIT\n  )\n\n  return (\n    <Layout pageStyles={{ background: \"#edf087\" }}>\n      <Seo title=\"สมาชิกวุฒิสภา\" />\n      <section className=\"section\">\n        <div className=\"book\">\n          <div className=\"page leftPage\">\n            <h1 css={{ ...cssH1, margin: \"1rem 0 0 0\" }}>\n              {senate.name} ชุดที่ {senate.party_ordinal}\n            </h1>\n            <h2 style={{ ...cssEngTitle }}>\n              <span\n                dangerouslySetInnerHTML={{\n                  __html: formatOrdinalNumber(senate.party_ordinal),\n                }}\n              />{\" \"}\n              Senate\n            </h2>\n            <h2 style={{ ...cssEngTitle }}>About</h2>\n            <p css={{ ...cssPageP }}>{senate.description}</p>\n            <h2 css={{ ...cssEngTitle }}>Official Link</h2>\n            <OfficialWebsite {...senate}></OfficialWebsite>\n            <h2 css={{ ...cssEngTitle }}>In Office</h2>\n            <InOfficeDate {...senate}></InOfficeDate>\n            <h2 style={{ ...cssEngTitle }}>Key Members</h2>\n            {keyMembers.map(x => {\n              return (\n                <div className=\"peopleCard\" key={x.id}>\n                  <PeopleCardMini key={x.id} {...x} />\n                </div>\n              )\n            })}\n          </div>\n          <div className=\"page\">\n            <h2\n              style={{\n                ...cssEngTitle,\n                [media(767)]: {\n                  marginTop: \"11rem\",\n                  marginBottom: \"0rem\",\n                },\n              }}\n            >\n              Members\n            </h2>\n            <h2\n              style={{\n                ...cssEngTitle,\n                fontFamily: \"var(--ff-text)\",\n                fontWeight: \"normal\",\n              }}\n            >\n              สมาชิกวุฒิสภาจำนวน {data.allPeopleYaml.totalCount} คน\n            </h2>\n            <div css={{ width: \"100%\" }}>\n              <div style={{ ...cssBarChart }}>\n                <StackedBarChart data={gender}></StackedBarChart>\n              </div>\n              <div style={{ ...cssBarChart }}>\n                <StackedBarChart data={age}></StackedBarChart>\n              </div>\n              <div style={{ ...cssBarChart }}>\n                <StackedBarChart data={education}></StackedBarChart>\n              </div>\n              <div style={{ ...cssBarChart }}>\n                <StackedBarChart data={occupation_group}></StackedBarChart>\n              </div>\n              <div style={{ ...cssBarChart }}>\n                <StackedBarChart data={asset}></StackedBarChart>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {votelogs.length > 0 ? (\n        <section css={{ ...cssSection, background: \"var(--cl-white)\" }}>\n          <div className=\"container\">\n            <h2 css={{ ...cssH1 }}>การลงมติล่าสุดของวุฒิสภา</h2>\n            <div\n              css={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"flex-start\",\n                flexWrap: \"wrap\",\n                marginTop: \"6rem\",\n              }}\n            >\n              {votelogs.map(({ id, fields, ...voteLog }) => (\n                <VoteLogCard\n                  isCompact\n                  key={id}\n                  css={{\n                    width: `calc((var(--container-width) - 4rem) / 2)`,\n                    margin: \"0 1rem 2rem 1rem\",\n                  }}\n                  slug={fields.slug}\n                  {...voteLog}\n                />\n              ))}\n            </div>\n          </div>\n        </section>\n      ) : null}\n\n      <section css={{ ...cssSection, background: \"#eeeeee\" }}>\n        <div className=\"container\">\n          <h2\n            css={{\n              fontSize: \"4.8rem\",\n              textAlign: \"center\",\n              paddingTop: \"6rem\",\n            }}\n          >\n            สมาชิกทั้งหมด\n          </h2>\n          <div\n            css={{\n              display: \"block\",\n              listStyle: \"none\",\n              textAlign: \"center\",\n              marginBottom: \"2.4rem\",\n              \"> button\": {\n                display: \"inline-block\",\n                fontSize: \"2.4rem\",\n                padding: \"1rem 0 0\",\n                margin: \"0 1rem\",\n                cursor: \"pointer\",\n                background: \"transparent\",\n                border: \"none\",\n                lineHeight: 1.5,\n                \"&.active\": {\n                  borderBottom: \"8px solid var(--cl-black)\",\n                },\n              },\n            }}\n            role=\"tablist\"\n          >\n            {tabList.map(tab => (\n              <button\n                type=\"button\"\n                key={tab.id}\n                className={[tab.getClass(memberFilter)].join(\" \")}\n                role=\"tab\"\n                onClick={selectMemberFilter(tab.filter)}\n              >\n                {tab.label} ({tab.count})\n              </button>\n            ))}\n          </div>\n          {showingMembers.length > 0 ? (\n            <div\n              css={{\n                display: \"flex\",\n                flexWrap: \"wrap\",\n                justifyContent: \"space-evenly\",\n              }}\n            >\n              {showingMembers.map((member, index) => (\n                <PeopleCard\n                  key={member.id}\n                  {...member}\n                  type=\"senator\"\n                ></PeopleCard>\n              ))}\n            </div>\n          ) : (\n            <div\n              css={{\n                fontFamily: \"var(--ff-title)\",\n                fontSize: \"3.2rem\",\n                textAlign: \"center\",\n                margin: \"6rem 0\",\n              }}\n            >\n              ไม่มีสมาชิก\n            </div>\n          )}\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport default SenatePage\n"],"names":["cssH1","fontSize","cssSection","paddingTop","paddingBottom","h2","textAlign","cssEngTitle","margin","cssPageP","cssBarChart","props","senate","data","memberFilter","setMemberFilter","useState","members","allPeopleYaml","edges","map","e","node","countMembers","filter","member","senator_method","length","tabList","id","label","count","getClass","gender","age","education","occupation_group","asset","loadCategoryStats","keyMembers","name","keyPos","nameParts","split","slice","slug","peopleSlug","join","lastname","position","fields","showingMembers","selectedMembers","sort","a","b","localeCompare","getSortedMembers","votelogs","joinPeopleVotelog","allPeopleVoteYaml","allVotelogYaml","pageStyles","background","title","className","css","party_ordinal","style","dangerouslySetInnerHTML","__html","formatOrdinalNumber","description","x","key","media","marginTop","marginBottom","fontFamily","fontWeight","totalCount","voteLog","isCompact","width","role","tab","type","onClick","index"],"sourceRoot":""}